// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id                 String               @id @default(uuid())
  domainName         String               @unique
  isAcitve           Boolean              @default(true)
  Applications       Application[]
  Users              User[]
  ExternalIdentifier ExternalIdentifier[]
  Groups             Group[]
  MailSetting        MailSetting?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  FailedLoginLogs    FailedLoginLog[]
}

enum UsernameStatus {
  ACTIVE
  PENDING
  REJECTED
}

model Registration {
  id             String         @id @default(uuid())
  User           User           @relation(fields: [userId], references: [id])
  userId         String
  Application    Application    @relation(fields: [applicationId], references: [id])
  applicationId  String
  username       String         @default(uuid())
  usernameStatus UsernameStatus @default(PENDING)
  Roles          Role[]
  isVerified     Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, applicationId])
  @@unique([username, applicationId])
}

model Application {
  id                      String                    @id @default(uuid())
  Tenant                  Tenant                    @relation(fields: [tenantId], references: [id])
  tenantId                String
  Registrations           Registration[]
  ExternalIdentifier      ExternalIdentifier[]
  Roles                   Role[]
  name                    String
  secret                  String                    @default(cuid())
  selfRegistrationEnabled Boolean                   @default(false)
  SelfRegistrationFields  SelfRegistrationField[]
  IdentityProviders       IdProviderOnApplication[]
  Grants                  Grant[]
  RedirectUris            RedirectURI[]
  JavascriptOrigins       JavascriptOrigin[]
  EnabledScopes           Scope[]
  AccessTokens            AccessToken[]
  AuthorizationCodes      AuthorizationCode[]
  RefreshTokens           RefreshToken[]
  issuer                  String                    @default("http://tomujin.digital")
  refreshTokenLifetime    Int                       @default(43200)
  accessTokenLifetime     Int                       @default(5)
  idTokenLifetime         Int                       @default(30)
  logo                    String?
  trustedApplication      Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  LoginLog LoginLog[]
  @@unique([tenantId, name])
}

model SelfRegistrationField {
  id            String      @id @default(uuid())
  Application   Application @relation(fields: [applicationId], references: [id])
  fieldName     String
  fieldType     String?
  isRequired    Boolean     @default(false)
  isEnabled     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  applicationId String
}

model Scope {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String?
  isCustomScope      Boolean             @default(false)
  ResourceServer     ResourceServer?     @relation(fields: [ResourceServerId], references: [id])
  ResourceServerId   String?
  Applications       Application[]
  AccessTokens       AccessToken[]
  AuthorizationCodes AuthorizationCode[]
  RefreshTokens      RefreshToken[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

enum GrantType {
  AUTHORIZATION_CODE
  PASSWORD
  REFRESH_TOKEN
  CLIENT_CREDENTIALS
  EXTENSION
}

model Grant {
  id           String        @id @default(uuid())
  grantType    GrantType     @unique
  Applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model RedirectURI {
  id            String      @id @default(uuid())
  Application   Application @relation(fields: [ApplicationId], references: [id])
  ApplicationId String
  url           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model JavascriptOrigin {
  id            String      @id @default(uuid())
  Application   Application @relation(fields: [ApplicationId], references: [id])
  ApplicationId String
  uri           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ResourceServer {
  id         String   @id @default(uuid())
  name       String
  identifier String   @unique
  Scopes     Scope[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AccessToken {
  id             String      @id @default(uuid())
  jti            String      @unique
  expirationDate DateTime
  Scopes         Scope[]
  User           User?       @relation(fields: [userId], references: [id])
  userId         String?
  Application    Application @relation(fields: [ApplicationId], references: [id])
  ApplicationId  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model RefreshToken {
  id             String      @id @default(uuid())
  refreshToken   String      @unique @default(uuid())
  expirationDate DateTime
  Scopes         Scope[]
  User           User        @relation(fields: [userId], references: [id])
  userId         String
  Application    Application @relation(fields: [ApplicationId], references: [id])
  ApplicationId  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model AuthorizationCode {
  id             String      @id @default(uuid())
  code           String      @unique @default(cuid(16))
  expirationDate DateTime
  redirectURI    String
  Scopes         Scope[]
  User           User        @relation(fields: [userId], references: [id])
  userId         String
  Application    Application @relation(fields: [ApplicationId], references: [id])
  ApplicationId  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

model Group {
  id          String   @id @default(uuid())
  Tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  name        String   @unique
  description String?
  Roles       Role[]
  Users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id            String         @id @default(uuid())
  Application   Application    @relation(fields: [applicationId], references: [id])
  applicationId String
  name          String
  description   String?
  isDefault     Boolean        @default(false)
  isSuperRole   Boolean        @default(false)
  Registrations Registration[]
  Groups        Group[]
  permissions   Json?
  ParentRoles   Role[]         @relation("RoleHierarchy", references: [id])
  ChildRoles    Role[]         @relation("RoleHierarchy", references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([name, applicationId])
}

enum AccountStatusType {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
  DISABLED
}

model User {
  id                  String               @id @default(uuid())
  Tenant              Tenant               @relation(fields: [tenantId], references: [id])
  tenantId            String
  mobile              String?              @unique
  username            String               @unique @default(cuid())
  usernameStatus      UsernameStatus       @default(PENDING)
  email               String              @unique
  password            String
  salt                String
  //
  accountStatusType   AccountStatusType    @default(UNCONFIRMED)
  ExternalIdentifiers ExternalIdentifier[]
  //
  Profile             Profile?
  PasswordResets      PasswordReset[]
  Devices             UserDevice[]
  AccessTokens        AccessToken[]
  AuthorizationCodes  AuthorizationCode[]
  RefreshTokens       RefreshToken[]
  Groups              Group[]
  FailedLogins        FailedLogin[]
  Registrations       Registration[]
  RememberMe          RememberMe[]
  FailedLoginLogs     FailedLoginLog[]
  LoginLog            LoginLog[]
  VerificationCodes   VerificationCode[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model VerificationCode {
  id             String   @id @default(uuid())
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  code           String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, code])
}

enum SupportedProvider {
  GOOGLE
  FACEBOOK
  APPLE
}

model IdProviderOnApplication {
  id            String            @id @default(uuid())
  isEnabled     Boolean           @default(true)
  isOverwritten Boolean           @default(false)
  providerType  SupportedProvider
  data          Json?

  IdentityProvider   IdentityProvider @relation(fields: [identityProviderId], references: [id])
  Application        Application      @relation(fields: [applicationId], references: [id])
  identityProviderId String
  applicationId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model IdentityProvider {
  id                  String                    @id @default(uuid())
  isEnabled           Boolean                   @default(true)
  providerType        SupportedProvider
  data                Json
  Applications        IdProviderOnApplication[]
  ExternalIdentifiers ExternalIdentifier[]
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
}

enum ExternalIdentifierStatus {
  UNCONFIRMED
  CONFIRMED
  DISABLED
}

model ExternalIdentifier {
  id                  String                   @id @default(uuid())
  Tenant              Tenant                   @relation(fields: [tenantId], references: [id])
  tenantId            String
  Application         Application              @relation(fields: [applicationId], references: [id])
  applicationId       String
  data                Json?
  providerType        SupportedProvider
  User                User                     @relation(fields: [userId], references: [id])
  userId              String
  status              ExternalIdentifierStatus @default(CONFIRMED)
  isUserCreatedBefore Boolean
  IdentityProvider    IdentityProvider         @relation(fields: [identityProviderId], references: [id])
  identityProviderId  String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model Profile {
  id                   String                @id @default(uuid())
  User                 User                  @relation(fields: [userId], references: [id])
  userId               String
  firstName            String
  lastName             String
  middleName           String?
  displayName          String
  nickName             String?
  birthdate            DateTime?
  gender               Gender                @default(OTHER)
  mobileNumber         String?
  picture              String?
  UserCustomAttributes UserCustomAttribute[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model UserCustomAttribute {
  name      String
  value     String
  Profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  @@id([name, profileId])
}

model RememberMe {
  id        String   @id @default(uuid())
  token     String   @unique
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model PasswordReset {
  id             String   @id @default(uuid())
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  token          String   @unique
  returnTo       String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum SMTPSecurity {
  NONE
  TLS
  SSL
}

model MailSetting {
  id           String       @id @default(uuid())
  Tenant       Tenant       @relation(fields: [tenantId], references: [id])
  tenantId     String
  host         String
  port         String
  username     String?
  password     String?
  secure       Boolean      @default(false)
  SMTPSecurity SMTPSecurity @default(NONE)
  ciphers      String?
  from         String
  name         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model FailedLogin {
  id        String   @id @default(uuid())
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  userId    String
}

model UserDevice {
  id           String   @id @default(uuid())
  User         User     @relation(fields: [userId], references: [id])
  userId       String
  deviceKey    String
  name         String?
  lastIP       String
  isRemembered Boolean  @default(false)
  SDK          String?
  lastSeen     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AuditLog {
  id String @id @default(uuid())
}

model FailedLoginLog {
  id        String   @id @default(uuid())
  count     Int      @default(1)
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  tenantId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginLog {
  id            String      @id @default(uuid())
  ipAddress     String
  User          User        @relation(fields: [userId], references: [id])
  Application   Application @relation(fields: [applicationId], references: [id])
  userId        String
  applicationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
